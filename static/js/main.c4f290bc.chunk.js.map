{"version":3,"sources":["renderings.js","App.js","serviceWorker.js","index.js"],"names":["photos","src","width","height","App","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAAaA,EAAS,CAClB,CACEC,IAAK,mCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,uCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,wCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,+CACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,4CACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,wDACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,gCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,4CACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,oCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,sCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,uCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,uCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,qCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,qCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,qCACLC,MAAO,GACPC,OAAQ,GAEV,CACEF,IAAK,wCACLC,MAAO,GACPC,OAAQ,I,4NCPCC,MAlEf,WAAgB,IAAD,EAC2BC,mBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAE2BF,oBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,KAIPC,EAAeC,sBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAChDP,EAAgBO,GAChBL,GAAgB,IACf,IAOH,OACE,yBAAKM,UAAU,aACb,yBAAKA,UAAU,kDACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,wBACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,iBAAiBC,gBAAc,gBAAgBC,gBAAc,QAAQC,aAAW,qBAClK,0BAAMP,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BQ,GAAG,iBAC3C,wBAAIR,UAAU,sBACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,8BAA7B,iBAAwE,0BAAMD,UAAU,WAAhB,eAE1E,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,mCAA7B,SAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,gDAA7B,aAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,qCAA7B,YAGJ,0BAAMD,UAAU,4BACd,2BAAOA,UAAU,uBAAuBE,KAAK,OAAOO,YAAY,WAChE,4BAAQT,UAAU,iCAAiCE,KAAK,UAAxD,aAKN,iCACE,kBAAC,IAAD,CAASjB,OAAQA,EAAQyB,QAASf,IAClC,kBAAC,IAAD,KACGF,EACC,kBAAC,IAAD,CAAOkB,QAvCK,WACpBnB,EAAgB,GAChBE,GAAgB,KAsCN,kBAAC,IAAD,CACEkB,aAAcrB,EACdsB,MAAO5B,EAAO6B,IAAI,SAAAC,GAAC,O,qVAAA,IACdA,EADc,CAEjBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,aAIf,SCpDMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.c4f290bc.chunk.js","sourcesContent":["export const photos = [\r\n    {\r\n      src: \"./images/AAPM-20x40-birdseye.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Broadwind-20x20-B-view2.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Dealer-E-20x20-A1-view-2.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/HP-Idol-On-Demand-20x20-A-view1.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Nuix-Blackhat-20x30-birdseye.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/OpenText-HIMSS-20x20-B-right-corner-view.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Plum-30x30-view2.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Plum-Organics-30x30-D-corner.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/QUT-20x20-B-birdseye.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Schumacher-20x40-view2.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Shick-20x30-C1-birdseye.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Smartbrew-20x20-B-front.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Smartbrew-20x20-front.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Univar-20x20-B-view-1.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Valley-20x20-birdseye.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    },\r\n    {\r\n      src: \"./images/Varian-20x20-A-side-view.jpg\",\r\n      width: 16,\r\n      height: 9\r\n    }\r\n  ];\r\n  ","import React, { useState, useCallback } from \"react\";\n// import { render } from \"react-dom\";\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport { photos } from \"./renderings\";\n\nfunction App() {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  return (\n    <div className=\"container\">\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n        <a className=\"navbar-brand\" href=\"/\">Carnate3D Renderings</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor01\" aria-controls=\"navbarColor01\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"https://orlandocarnate.com\">Developer Page<span className=\"sr-only\">(current)</span></a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"https://carnate3d.wordpress.com\">Blog</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"https://www.linkedin.com/in/orlando-carnate/\">LinkedIn</a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"https://github.com/orlandocarnate\">GitHub</a>\n            </li>\n          </ul>\n          <form className=\"form-inline my-2 my-lg-0\">\n            <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" />\n            <button className=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\n          </form>\n        </div>\n      </nav>\n\n      <section>\n        <Gallery photos={photos} onClick={openLightbox} />\n        <ModalGateway>\n          {viewerIsOpen ? (\n            <Modal onClose={closeLightbox}>\n              <Carousel\n                currentIndex={currentImage}\n                views={photos.map(x => ({\n                  ...x,\n                  srcset: x.srcSet,\n                  caption: x.title\n                }))}\n              />\n            </Modal>\n          ) : null}\n        </ModalGateway>\n\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}