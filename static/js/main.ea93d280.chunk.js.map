{"version":3,"sources":["components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","tabIndex","aria-disabled","App","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","photos","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAkCeA,MAhCf,WACI,OACI,yBAAKC,UAAU,kDACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,kCACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBAClL,0BAAMP,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BQ,GAAG,iBACzC,wBAAIR,UAAU,sBACV,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,8BAA7B,iBAAwE,0BAAMD,UAAU,cAE5F,wBAAIA,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,mCAA7B,SAEJ,wBAAID,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,gDAA7B,aAEJ,wBAAID,UAAU,YACV,uBAAGA,UAAU,WAAWC,KAAK,qCAA7B,WAEJ,wBAAID,UAAU,YACV,uBAAGA,UAAU,oBAAoBC,KAAK,IAAIQ,SAAS,KAAKC,gBAAc,QAAtE,iB,4NCqCTC,MAnDf,WAAgB,IAAD,EAC2BC,mBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAE2BF,oBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,KAIPC,EAAeC,sBAAY,SAACC,EAAD,GAA6B,EAAnBC,MAAoB,IAAbC,EAAY,EAAZA,MAChDP,EAAgBO,GAChBL,GAAgB,IACf,IAOH,OAWE,yBAAKhB,UAAU,aACb,iCACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAASsB,OAAQA,EAAQC,QAASN,IAElC,kBAAC,IAAD,KACGF,EACC,kBAAC,IAAD,CAAOS,QAvBK,WACpBV,EAAgB,GAChBE,GAAgB,KAsBN,kBAAC,IAAD,CACES,aAAcZ,EACda,MAAOJ,EAAOK,IAAI,SAAAC,GAAC,O,qVAAA,IACdA,EADc,CAEjBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,aAIf,SCzCMC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.ea93d280.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n            <a className=\"navbar-brand\" href=\"/\">Orlando Carnate's 3D Portfolio</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarColor01\">\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"https://orlandocarnate.com\">Developer Page<span className=\"sr-only\"></span></a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"https://carnate3d.wordpress.com\">Blog</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"https://www.linkedin.com/in/orlando-carnate/\">LinkedIn</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link\" href=\"https://github.com/orlandocarnate\">GitHub</a>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <a className=\"nav-link disabled\" href=\"#\" tabIndex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n                    </li>\r\n                </ul>\r\n\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useState, useCallback } from \"react\";\nimport Gallery from \"react-photo-gallery\";\nimport Carousel, { Modal, ModalGateway } from \"react-images\";\nimport photos from \"./components/renderings\";\n// import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport NavBar from \"./components/navbar\";\n// import Home from \"./pages/Home\";\n// import Architecture from \"./pages/Architecture\";\n// import Tradeshows from \"./pages/Tradeshows\";\n\nfunction App() {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n\n  const openLightbox = useCallback((event, { photo, index }) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  return (\n    // <Router>\n    //   <div className=\"container\">\n    //     <Switch>\n    //       <Route exact path=\"/\" component={Home} />\n    //       <Route path=\"/Architecture\" component={Architecture} />\n    //       <Route path=\"/Tradeshows\" component={Tradeshows} />\n    //     </Switch>\n\n    //   </div>\n    // </Router>\n    <div className=\"container\">\n      <section>\n        <NavBar />\n        <Gallery photos={photos} onClick={openLightbox} />\n\n        <ModalGateway>\n          {viewerIsOpen ? (\n            <Modal onClose={closeLightbox}>\n              <Carousel\n                currentIndex={currentImage}\n                views={photos.map(x => ({\n                  ...x,\n                  srcset: x.srcSet,\n                  caption: x.title\n                }))}\n              />\n            </Modal>\n          ) : null}\n        </ModalGateway>\n\n      </section>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}